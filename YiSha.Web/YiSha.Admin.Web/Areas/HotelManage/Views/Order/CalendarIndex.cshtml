@{
    Layout = "~/Views/Shared/_Index.cshtml";
}

<link href='~/lib/fullcalendar-scheduler/lib/main.css' rel='stylesheet' />
<div class="container-div">
    <div class="row">
        <div id='calendar'></div>
    </div>
</div>
<script src="~/lib/jquery/2.1.4/jquery.js"></script>
<script src='~/lib/fullcalendar-scheduler/lib/main.js'></script>
<script src='~/lib/fullcalendar-scheduler/lib/locales/zh-cn.js'></script>
<script src="~/lib/moment/moment.min.js"></script>
<script type="text/javascript">
    //#region 初始化参数
    var _branchId = ys.getCookie("BranchId");
    var _startdate = moment().add(-3, "days").format("YYYY-MM-DD");
    var _resourcesData = [];
    var _eventsData = [];
    var _eventData = [];
    var _branchEventsData = [];
    //#endregion

    document.addEventListener('DOMContentLoaded', function () {
        calendar.render();

        $(document.getElementById("displayMode")).on('click', function () {
            var dm = ys.getCookie("DisplayMode");
            if (dm == 0) {
                document.cookie = "DisplayMode=" + 1 + ";path=/";
                location.reload();
            }
            else {
                document.cookie = "DisplayMode=" + 0 + ";path=/";
                location.reload();
            }
        });

        $(document.getElementById("today")).on('click', function () {
            calendar.changeView("resourceTimelineThirtyDays", _startdate);
            $(document.getElementById("startdate")).val(_startdate);
        });

        $(document.getElementById("prev")).on('click', function () {
            calendar.prev();
            var tempdate = moment(calendar.getDate()).format("YYYY-MM-DD");
            $(document.getElementById("startdate")).val(tempdate);
        });

        $(document.getElementById("next")).on('click', function () {
            calendar.next();
            var tempdate = moment(calendar.getDate()).format("YYYY-MM-DD");
            $(document.getElementById("startdate")).val(tempdate);
        });

        laydate.render({
            elem: document.getElementById("startdate"),
            format: 'yyyy-MM-dd',
            value: _startdate,
            done: function (value, date) {
                calendar.changeView("resourceTimelineThirtyDays", value);
            }
        });
    });

    //#region 初始化Resource
    function initResourceList() {
        var options = {
            url: '@Url.Content("~/HotelManage/Branch/GetListJson")',
            async: false,
            success: function (rdata) {
                _branchData = rdata.Data.find(x => x.Id == _branchId);
                _resourcesData = [];
                var resourcesData = (getJsonResource(rdata.Data, _branchId));
                var newbranch = {
                    id:"00000001",
                    title:_branchData.BranchName,
                    order: "01",
                    children:[],
                };
                resourcesData.push(newbranch);
                var dm = ys.getCookie("DisplayMode");
                if (dm == 0)
                    _resourcesData = resourcesData;
                else {
                    for (var i = 0; i < resourcesData.length; i++) {
                        for (var j = 0; j < resourcesData[i].children.length; j++) {
                            _resourcesData.push(resourcesData[i].children[j]);
                        }
                    }
                    _resourcesData.push(newbranch);
                }
            }
        };
        ys.ajax(options);
    }
    var getJsonResource = function (data, parentId) {

        var itemArr = [];

        for (var i = 0; i < data.length; i++) {

            var resource = data[i];

            if (resource.ParentId == parentId) {

                var newResource = {};

                newResource.id = resource.Id;

                newResource.title = resource.BranchName;

                newResource.order = resource.BranchSort;

                newResource.pId = resource.ParentId;

                newResource.isClean = resource.IsClean;

                newResource.children = getJsonResource(data, resource.Id);

                itemArr.push(newResource);

            }

        }
        return itemArr;
    };
    //#endregion

    //#region 初始化Event
    function initEventList(start,end) {
        var options = {
            url: '@Url.Content("~/HotelManage/Order/GetListJson2")',
            async: false,
            data: {
                BranchId: _branchId,
                StartDate: start,
                EndDate:end
            },
            success: function (rdata) {
                _eventsData = [];
                initResourceList();
                _eventsData = getJsonEvent(rdata.Data,start,end);
            }
        };
        ys.ajax(options);
    }
    var getJsonEvent = function (data, start, end) {

        var dm = ys.getCookie("DisplayMode");

        var itemArr = [];

        var itemArr2 = [];

        var itemArr3 = [];

        var dateArr = [];

        var typeArr = [];

        for (var i = 0; i < moment(end).diff(start, "days"); i++) {
            dateArr.push(moment(start).add(i, "days").format("YYYY-MM-DD"));
        }

        for (var i = 0; i < _resourcesData.length; i++) {
            typeArr.push(_resourcesData[i].id);
        }

        for (var i = 0; i < data.length; i++) {
            if (data[i].BranchId != _branchId)
                continue;

            var event = data[i];

            var newEvent = {};

            newEvent.id = event.Id;

            newEvent.branchId = event.BranchId;

            newEvent.channelId = event.ChannelId;

            newEvent.houseTypeId = event.HouseTypeId;

            newEvent.houseNumberId = event.HouseNumberId;

            newEvent.isFinance = event.IsFinance;

            newEvent.isFinish = event.IsFinish;

            newEvent.nickname = event.Nickname;

            newEvent.orderName = event.OrderName;

            newEvent.orderNumber = event.OrderNumber;

            newEvent.phone = event.Phone;

            newEvent.remark = event.Remark;

            newEvent.state = event.State;

            newEvent.stewardId = event.StewardId;

            newEvent.totalPrice = event.TotalPrice;

            newEvent.unitPrice = event.UnitPrice;

            newEvent.houseCount = event.HouseCount;

            newEvent.title = event.OrderName + " "+event.ChannelName;

            newEvent.resourceId = event.HouseNumberId;

            newEvent.start = event.StartDate;

            newEvent.end = event.EndDate;

            newEvent.channelName = event.ChannelName;

            newEvent.allDay = true;

            newEvent.backgroundColor = event.ChannelColor;

            newEvent.borderColor = event.ChannelColor;

            if (event.IsFinance == 1) {
                newEvent.editable = false;
                newEvent.startEditable = false;
                newEvent.durationEditable = false;
                newEvent.resourceEditable = false;
            }

            itemArr.push(newEvent);

        }

        for (var i = 0; i < itemArr.length; i++) {
            var count = moment(itemArr[i].end).diff(itemArr[i].start, "days");
            if (count > 1) {
                for (var j = 0; j < count; j++) {
                    var newEvent2 = {};
                    newEvent2.id = itemArr[i].id;
                    newEvent2.start = moment(itemArr[i].start).add(j, "days").format('YYYY-MM-DD');
                    newEvent2.end = moment(itemArr[i].start).add(j + 1, "days").format('YYYY-MM-DD');
                    newEvent2.resourceId = itemArr[i].houseTypeId;
                    newEvent2.title = "";
                    itemArr2.push(newEvent2);
                }
            }
            else {
                var newEvent2 = {};
                newEvent2.id = itemArr[i].id;
                newEvent2.start = moment(itemArr[i].start).format('YYYY-MM-DD');
                newEvent2.end = moment(itemArr[i].end).format('YYYY-MM-DD');
                newEvent2.resourceId = itemArr[i].houseTypeId;
                newEvent2.title = "";
                itemArr2.push(newEvent2);
            }
        }
        var dateContainer = {}; // 针对键start进行归类的容器
        itemArr2.forEach(item => {
            dateContainer[item.start] = dateContainer[item.start] || [];

            //当逻辑或||时，找到为true的分项就停止处理，并返回该分项的值，否则执行完，并返回最后分项的值。

            dateContainer[item.start].push(item);
        });
        var dateName = Object.keys(dateContainer); // 获取日期种类：["apple", "banana"]
        _branchEventsData = [];
        dateName.forEach(dateItem => {
            let count = 0;
            dateContainer[dateItem].forEach(item => {
                count++; // 遍历条目计算总数
            });
            itemArr.push({ 'start': dateItem, 'end': moment(dateItem).add(1, "days").format("YYYY-MM-DD"), 'title': count + "间", 'id': ys.getGuid(), 'resourceId': "00000001", 'backgroundColor': "LightSeaGreen", 'borderColor': "LightSeaGreen", 'editable': false, 'overlap': false, 'startEditable': false, 'durationEditable': false, 'resourceEditable': false });
            itemArr3.push({ 'start': dateItem, 'end': moment(dateItem).add(1, "days").format("YYYY-MM-DD"), 'title': count + "间", 'id': ys.getGuid(), 'resourceId': "00000001", 'backgroundColor': "LightSeaGreen", 'borderColor': "LightSeaGreen", 'editable': false, 'overlap': false, 'startEditable': false, 'durationEditable': false, 'resourceEditable': false });

            if (dm == 0) {
                var typeContainer = {};
                dateContainer[dateItem].forEach(item2 => {
                    typeContainer[item2.resourceId] = typeContainer[item2.resourceId] || [];
                    typeContainer[item2.resourceId].push(item2);
                })
                var typeName = Object.keys(typeContainer);
                typeName.forEach(typeItem => {
                    let count2 = 0;
                    typeContainer[typeItem].forEach(item3 => {
                        count2++;
                    });
                    itemArr.push({ 'start': dateItem, 'end': moment(dateItem).add(1, "days").format("YYYY-MM-DD"), 'title': count2 + "间", 'id': ys.getGuid(), 'resourceId': typeItem, 'backgroundColor': "LightGray", 'borderColor': "LightGray", 'editable': false, 'overlap': false, 'startEditable': false, 'durationEditable': false, 'resourceEditable': false });
                    itemArr3.push({ 'start': dateItem, 'end': moment(dateItem).add(1, "days").format("YYYY-MM-DD"), 'title': count2 + "间", 'id': ys.getGuid(), 'resourceId': typeItem, 'backgroundColor': "LightGray", 'borderColor': "LightGray", 'editable': false, 'overlap': false, 'startEditable': false, 'durationEditable': false, 'resourceEditable': false });
                });
            }
        });
        if (dm == 0) {
            for (var i = 0; i < typeArr.length; i++) {
                for (var j = 0; j < dateArr.length; j++) {
                    if (itemArr3.filter(obj => obj.start == dateArr[j] && obj.resourceId == typeArr[i]) == false) {
                        if (typeArr[i] == "00000001")
                            itemArr.push({ 'start': dateArr[j], 'end': moment(dateArr[j]).add(1, "days").format("YYYY-MM-DD"), 'title': "0间", 'id': (i * 1000 + j).toString(), 'resourceId': typeArr[i], 'backgroundColor': "IndianRed", 'borderColor': "IndianRed", 'editable': false, 'overlap': false, 'startEditable': false, 'durationEditable': false, 'resourceEditable': false });
                        else
                            itemArr.push({ 'start': dateArr[j], 'end': moment(dateArr[j]).add(1, "days").format("YYYY-MM-DD"), 'title': "0间", 'id': (i * 1000 + j).toString(), 'resourceId': typeArr[i], 'backgroundColor': "LightGray", 'borderColor': "LightGray", 'editable': false, 'overlap': false, 'startEditable': false, 'durationEditable': false, 'resourceEditable': false });
                    }
                }
            }
        }
        else {
            for (var j = 0; j < dateArr.length; j++) {
                if (itemArr3.filter(obj => obj.start == dateArr[j] && obj.resourceId == "00000001") == false) {
                    itemArr.push({ 'start': dateArr[j], 'end': moment(dateArr[j]).add(1, "days").format("YYYY-MM-DD"), 'title': "0间", 'id': (i * 1000 + j).toString(), 'resourceId': "00000001", 'backgroundColor': "IndianRed", 'borderColor': "IndianRed", 'editable': false, 'overlap': false, 'startEditable': false, 'durationEditable': false, 'resourceEditable': false });
                }
            }
        }
        return itemArr;

    };
    var setJsonEvent = function (data) {

        var event = {};

        event.Id = data.event._def.publicId;

        event.BranchId = data.event._def.extendedProps.branchId;

        event.ChannelId = data.event._def.extendedProps.channelId;

        event.HouseTypeId = data.newResource==null?data.event._def.extendedProps.houseTypeId:data.newResource._resource.extendedProps.pId;

        event.HouseNumberId = data.newResource == null ? data.event._def.extendedProps.houseNumberId :data.newResource._resource.id;

        event.IsFinance = data.event._def.extendedProps.isFinance;

        event.IsFinish = data.event._def.extendedProps.isFinish;

        event.Nickname = data.event._def.extendedProps.nickname;

        event.OrderName = data.event._def.extendedProps.orderName;

        event.OrderNumber = data.event._def.extendedProps.orderNumber;

        event.Phone = data.event._def.extendedProps.phone;

        event.Remark = data.event._def.extendedProps.remark;

        event.State = data.event._def.extendedProps.state;

        event.StewardId = data.event._def.extendedProps.stewardId;

        event.TotalPrice = data.event._def.extendedProps.totalPrice;

        event.UnitPrice = data.event._def.extendedProps.unitPrice;

        event.HouseCount = data.event._def.extendedProps.houseCount;

        event.StartDate = moment(data.event._instance.range.start).format('YYYY-MM-DD');

        event.EndDate = moment(data.event._instance.range.end).format('YYYY-MM-DD');

        return event;

    };
    var setJsonEvent2 = function (data) {

        var event = {};

        event.Id = data.event._def.publicId;

        event.BranchId = data.event._def.extendedProps.branchId;

        event.ChannelId = data.event._def.extendedProps.channelId;

        event.HouseTypeId = data.event._def.extendedProps.houseTypeId;

        event.HouseNumberId = data.event._def.extendedProps.houseNumberId;

        event.IsFinance = data.event._def.extendedProps.isFinance;

        event.IsFinish = data.event._def.extendedProps.isFinish;

        event.Nickname = data.event._def.extendedProps.nickname;

        event.OrderName = data.event._def.extendedProps.orderName;

        event.OrderNumber = data.event._def.extendedProps.orderNumber;

        event.Phone = data.event._def.extendedProps.phone;

        event.Remark = data.event._def.extendedProps.remark;

        event.State = data.event._def.extendedProps.state;

        event.StewardId = data.event._def.extendedProps.stewardId;

        event.StartDate = moment(data.event._instance.range.start).format('YYYY-MM-DD');

        event.EndDate = moment(data.event._instance.range.end).format('YYYY-MM-DD');

        event.TotalPrice = data.event._def.extendedProps.unitPrice * (moment(data.event._instance.range.end).diff(data.event._instance.range.start,"days"));

        event.UnitPrice = data.event._def.extendedProps.unitPrice ;

        event.HouseCount = moment(data.event._instance.range.end).diff(data.event._instance.range.start, "days");

        return event;

    };
    //#endregion

    //#region 初始化Calendar
    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
        schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
        locale: 'zh-cn',
        initialDate: _startdate,
        nowIndicator: true,
        initialView: 'resourceTimelineThirtyDays',
        views: {
            resourceTimelineThirtyDays: {
                type: 'resourceTimeline',
                duration: { days: 31 }
            }
        },
        headerToolbar: false,
        aspectRatio: 1.8,
        height: '100%',
        slotMinWidth: '100',
        slotLabelFormat: { weekday: 'short', month: 'numeric', day: 'numeric', omitCommas: true },
        resourceAreaWidth: '175px',
        scrollTime: "00:00:00",
        resourceAreaColumns: [
            {
                field: 'title',
                headerDidMount: function (arg) {
                    hl = '<div id="addbtn">'
                        + '<button id="displayMode" class="btn-link" title="切换显示模式"><i class="fa fa-refresh"></i></button>'
                        + '<button id="prev" class="btn-link" title="向前一个月"><i class="fa fa-chevron-left"></i></button>'
                        + '<input class="btn-link" type="text" id="startdate" style="width:70px;text-align:center">'
                        + '<button id="next" class="btn-link" title="向后一个月"><i class="fa fa-chevron-right"></i></button>'
                        + '<button id="today" class="btn-link" title="跳转至今天"><i class="fa fa-circle-o"></i></button>'
                        + '</div>';
                    arg.el.children[0].children[0].innerHTML = "";
                    arg.el.children[0].children[0].innerHTML = hl;
                }
            }
        ],
        resourceOrder: 'order',
        resourceLaneDidMount: function (arg) {
            arg.el.style.height = "30px";
        },
        resourceLabelDidMount: function (arg) {
            arg.el.style.height = "30px";
            arg.el.style.lineHeight = "30px";
            arg.el.style.margin = '0px';
            arg.el.style.padding = '0px';
            if (ys.getCookie("DisplayMode") == 1)
                arg.el.style.textAlign = "center";
            if (ys.isNullOrEmpty(arg.resource._resource.parentId) && ys.getCookie("DisplayMode") == 0)
                return;
            if (arg.resource._resource.extendedProps.isClean == 0) {
                arg.el.style.color = 'red';
            }
            else {
                arg.el.style.color = 'black';
            }
            $(arg.el).on("click", function () {
                var postData = {};
                ys.ajax({
                    url: '@Url.Content("~/HotelManage/Branch/GetFormJson")' + '?id=' + arg.resource._resource.id,
                    type: 'get',
                    async: 'false',
                    success: function (obj) {
                        if (obj.Tag == 1) {
                            postData = obj.Data;
                            if (postData.IsClean == 0) {
                                postData.IsClean = 1;
                                arg.el.style.color = 'black';
                            }
                            else {
                                postData.IsClean = 0;
                                arg.el.style.color = 'red';
                            }
                            ys.ajax({
                                url: '@Url.Content("~/HotelManage/Branch/SaveFormJson")',
                                type: 'post',
                                data: postData,
                                success: function (obj) {
                                    if (obj.Tag == 1) {
                                        ys.msgSuccess(obj.Message);
                                        calendar.refetchResources();
                                    }
                                    else {
                                        ys.msgError(obj.Message);
                                    }
                                }
                            });
                        }
                    }
                });
            });
        },
        resources: function (fetchInfo, successCallback, failureCallback) {
            initResourceList();
            successCallback(_resourcesData);
        },
        selectable: true,
        selectOverlap: false,
        select: function (selectionInfo) {
            if (ys.isNullOrEmpty(selectionInfo.resource._resource.parentId))
                return;
            _eventData = [];
            _eventData = {
                StartDate: selectionInfo.startStr,
                EndDate: selectionInfo.endStr,
                BranchId: _branchId,
                HouseTypeId: selectionInfo.resource._resource.parentId,
                HouseNumberId: selectionInfo.resource._resource.id,
                IsFinance: 0,
                IsFinish: 0,
                State: 0
            };
            showSaveForm(true);
        },
        events: function (fetchInfo, successCallback, failureCallback) {
            initEventList(moment(fetchInfo.startStr).format("YYYY-MM-DD"), moment(fetchInfo.endStr).format("YYYY-MM-DD"));
            successCallback(_eventsData);
        },
        eventContent: function (arg) {
            if (arg.event._def.ui.overlap == false)
                return;

            let italicEl = document.createElement('div');
            var len = arg.event._def.title.length;
            var title = arg.event._def.title;
            if (len > 6)
                title = title.substring(0, 6);
            var innerHTML = "<div class='fc-event-main-frame'><div style='width:85%;float:left;font-size:10px;'>&nbsp;" + title ;

            if (arg.event._def.extendedProps.state == 0 && arg.event._def.extendedProps.isFinish == 0) {
                innerHTML += "</div><div style='float:right;color:black'><i class='fa  fa-plane'></i>";
            }
            else if (arg.event._def.extendedProps.state == 1 && arg.event._def.extendedProps.isFinish == 0) {
                innerHTML += "</div><div style='float:right;color:black'><i class='fa fa-user'></i>";
            }
            else {
                innerHTML += "</div><div style='float:right;color:black'>";
            }
            if (arg.event._def.extendedProps.state == 2 && arg.event._def.extendedProps.isFinish == 0) {
                innerHTML += "<i class='fa fa-rmb' style='color:black'></i></div></div>";
            }
            else if (arg.event._def.extendedProps.isFinish == 1&&arg.event._def.extendedProps.isFinance == 0) {
                innerHTML += "<i class='fa fa-check' style='color:white'></i></div></div>";
            }
            else if (arg.event._def.extendedProps.isFinance == 1) {
                innerHTML += "<i class='fa fa-lock' style='color:white'></i></div></div>";
            }

            italicEl.innerHTML = innerHTML;

            let arrayOfDomNodes = [italicEl];

            return { domNodes: arrayOfDomNodes };
        },
        eventDidMount: function (arg) {
            arg.el.style.height = "30px";
            arg.el.style.margin = '0px';
            arg.el.style.padding = '0px';
        },
        eventClick: function (eventClickInfo) {
            if (eventClickInfo.event._def.ui.overlap == false)
                return;
            _eventData = [];
            _eventData = {
                Id:eventClickInfo.event._def.publicId,
                StartDate: moment(eventClickInfo.event._instance.range.start).format('YYYY-MM-DD'),
                EndDate: moment(eventClickInfo.event._instance.range.end).format('YYYY-MM-DD'),
                BranchId: _branchId,
                HouseTypeId: eventClickInfo.event._def.extendedProps.houseTypeId,
                HouseNumberId: eventClickInfo.event._def.extendedProps.houseNumberId,
                IsFinance: eventClickInfo.event._def.extendedProps.isFinance,
                IsFinish: eventClickInfo.event._def.extendedProps.isFinish,
                State: eventClickInfo.event._def.extendedProps.state,
                OrderName: eventClickInfo.event._def.extendedProps.orderName,
                Phone: eventClickInfo.event._def.extendedProps.phone,
                OrderNumber: eventClickInfo.event._def.extendedProps.orderNumber,
                Nickname: eventClickInfo.event._def.extendedProps.nickname,
                TotalPrice: eventClickInfo.event._def.extendedProps.totalPrice,
                Remark: eventClickInfo.event._def.extendedProps.remark,
                ChannelId: eventClickInfo.event._def.extendedProps.channelId,
                StewardId: eventClickInfo.event._def.extendedProps.stewardId
            };
            showSaveForm(false);
        },
        editable: true, // enable draggable events
        eventOverlap: false,
        eventDrop: function (info) {
            saveEvent(info);
        },
        eventResize: function (info) {
            saveEvent2(info);
        },
    });
    //#endregion

    //#region 定义showSaveForm, deleteForm, showProceedsForm, showProceedsIndex
    function showSaveForm(bAdd) {
        var id = 0;
        if (!bAdd) {
            id = _eventData.Id;
        }
        ys.openDialog({
            title: id > 0 ? '编辑 ( ' + _eventData.StartDate + ' - ' + _eventData.EndDate + ' )' : '添加 ( ' + _eventData.StartDate + ' - ' + _eventData.EndDate+ ' )',
            content: '@Url.Content("~/HotelManage/Order/CalendarForm")' + '?id=' + id,
            width: '768px',
            height: '678px',
            callback: function (index, layero) {
                var iframeWin = window[layero.find('iframe')[0]['name']];
                iframeWin.saveForm(index);
            },
        });
    }
    function saveEvent(info) {
        var postData = setJsonEvent(info);
        ys.ajax({
            url: '@Url.Content("~/HotelManage/Order/SaveFormJson")',
            type: 'post',
            data: postData,
            success: function (obj) {
                if (obj.Tag == 1) {
                    ys.msgSuccess(obj.Message);
                    calendar.refetchEvents();
                    //calendar.render();
                }
                else {
                    ys.msgError(obj.Message);
                }
            }
        });
    }
    function saveEvent2(info) {
        var postData = setJsonEvent2(info);
        ys.ajax({
            url: '@Url.Content("~/HotelManage/Order/SaveFormJson")',
            type: 'post',
            data: postData,
            success: function (obj) {
                if (obj.Tag == 1) {
                    ys.msgSuccess(obj.Message);
                    calendar.refetchEvents();
                    //calendar.render();
                }
                else {
                    ys.msgError(obj.Message);
                }
            }
        });
    }
    //#endregion
</script>
